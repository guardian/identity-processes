AWSTemplateFormatVersion: "2010-09-09"

Parameters:
  Stage:
    Description: Stage name
    Type: String
    AllowedValues:
      - PROD
      - CODE
    Default: CODE
  ResultsBucket:
    Description: Bucket where results and status updates are uploaded to
    Type: String
    Default: baton-results
  VpcId:
    Description: Vpc where the lambda is being created
    Type: String
  VpcSubnets:
    Description: Subnets to use in VPC
    Type: CommaDelimitedList
  EncryptionPasswordPath:
    Type: String
    Default: /identity/formstack-baton-requests/encryption-password
  FormstackAccountOneTokenPath:
    Type: String
    Default: /identity/formstack-baton-requests/formstack-account-one-token
  FormstackAccountTwoTokenPath:
    Type: String
    Default: /identity/formstack-baton-requests/formstack-account-two-token
  BcryptSaltPath:
    Type: String
    Default: /identity/formstack-baton-requests/bcrypt-salt
  LastUpdatedTableName:
    Type: String
    Default: formstack-submissions-last-updated
  SubmissionsTableName:
    Type: String
    Default: formstack-submission-ids

Conditions:
  IsProd: !Equals [ !Ref Stage, PROD ]

Resources:
  TopicPagerDutyAlerts:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: PagerDutyTopic
      Subscription:
        - Endpoint: https://events.pagerduty.com/adapter/cloudwatch_sns/v1/96fdc0179acb4c5db3e059d775ea6a9e
          Protocol: https

  BatonInvokeRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "formstack-baton-lambda-role-${Stage}"
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              AWS: !Sub "arn:aws:iam::942464564246:root"
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: LambdaPolicy
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource: !GetAtt FormstackBatonSarLambda.Arn

  FormstackBatonSarLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: EC2Policy
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - ec2:CreateNetworkInterface
                  - ec2:DescribeNetworkInterfaces
                  - ec2:DeleteNetworkInterface
                Resource: "*"
        - PolicyName: LogPolicy
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/formstack-baton-sar-lambda-${Stage}:log-stream:*"
        - PolicyName: S3ListPolicy
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - s3:ListBucket
                Resource: !Sub arn:aws:s3:::${ResultsBucket}
        - PolicyName: InvokeLambdaPolicy
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                - lambda:InvokeFunction
                Resource: !GetAtt PerformFormstackSarLambda.Arn

  LambdaSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Sub Security group for the formstack-baton-requests-${Stage} lambdas
      VpcId: !Ref VpcId

  FormstackBatonSarLambda:
    Type: AWS::Lambda::Function
    Properties:
      Description: Initiates the PerformFormstackSarLambda and checks the status of Formstack SARs via S3
      FunctionName:
        !Sub formstack-baton-sar-lambda-${Stage}
      Code:
        S3Bucket: identity-lambda
        S3Key: !Sub identity/${Stage}/formstack-baton-requests/main.jar
      Handler: com.gu.identity.formstackbatonrequests.Handler::handleSar
      Environment:
        Variables:
          RESULTS_BUCKET: !Ref ResultsBucket
          RESULTS_PATH: !Sub formstack-results/${Stage}
          PERFORM_FUNCTION_NAME: !Ref PerformFormstackSarLambda
      MemorySize: 384
      Runtime: java8
      Timeout: 120
      VpcConfig:
        SecurityGroupIds:
          - !Ref LambdaSecurityGroup
        SubnetIds: !Ref VpcSubnets
      Role:
        !GetAtt FormstackBatonSarLambdaRole.Arn

#  There tables are only created in PROD since Formstack doesn't have a CODE environment and we don't want to test in
#  CODE with real data
  FormstackSubmissionIds:
    Condition: IsProd
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Ref SubmissionsTableName
      AttributeDefinitions:
        - AttributeName: email
          AttributeType: S
        - AttributeName: submissionId
          AttributeType: S
      KeySchema:
        - AttributeName: email
          KeyType: HASH
        - AttributeName: submissionId
          KeyType: RANGE
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5

  FormstackSubmissionsLastUpdated:
    Condition: IsProd
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Ref LastUpdatedTableName
      AttributeDefinitions:
        - AttributeName: formstackSubmissionTableMetadata
          AttributeType: S
      KeySchema:
        - AttributeName: formstackSubmissionTableMetadata
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1

  PerformFormstackSarLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: EC2Policy
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - ec2:CreateNetworkInterface
                  - ec2:DescribeNetworkInterfaces
                  - ec2:DeleteNetworkInterface
                Resource: "*"
        - PolicyName: LogPolicy
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/formstack-baton-perform-sar-lambda-${Stage}:log-stream:*"
        - PolicyName: S3ListPolicy
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - s3:ListBucket
                Resource: !Sub arn:aws:s3:::${ResultsBucket}
        - PolicyName: S3WritePolicy
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:PutObjectAcl
                  - s3:GetObject
                Resource: !Sub arn:aws:s3:::${ResultsBucket}/formstack-results/${Stage}/*
        - PolicyName: GetParamsPolicy
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action: ssm:GetParameter
                Resource:
                  - !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter${FormstackAccountOneTokenPath}
                  - !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter${FormstackAccountTwoTokenPath}
                  - !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter${EncryptionPasswordPath}
                  - !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter${BcryptSaltPath}
        - PolicyName: SubmissionIdsTablePolicy
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:BatchWriteItem
                  - dynamodb:Query
                Resource: !Sub arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${SubmissionsTableName}
        - PolicyName: LastUpdatedTablePolicy
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                - dynamodb:GetItem
                - dynamodb:PutItem
                Resource: !Sub arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${LastUpdatedTableName}

  PerformFormstackSarLambda:
    Type: AWS::Lambda::Function
    Properties:
      Description: Performs SAR to Formstack, writing results to S3
      FunctionName:
        !Sub formstack-baton-perform-sar-lambda-${Stage}
      Code:
        S3Bucket: identity-lambda
        S3Key: !Sub identity/${Stage}/formstack-baton-requests/main.jar
      Handler: com.gu.identity.formstackbatonrequests.Handler::handlePerformSar
      Environment:
        Variables:
          STAGE: !Ref Stage
          RESULTS_BUCKET: !Ref ResultsBucket
          RESULTS_PATH: !Sub formstack-results/${Stage}
          ENCRYPTION_PASSWORD_PATH: !Ref EncryptionPasswordPath
          FORMSTACK_ACCOUNT_ONE_TOKEN_PATH: !Ref FormstackAccountOneTokenPath
          FORMSTACK_ACCOUNT_TWO_TOKEN_PATH: !Ref FormstackAccountTwoTokenPath
          BCRYPT_SALT_PATH: !Ref BcryptSaltPath
          SUBMISSION_TABLE_NAME: !Ref SubmissionsTableName
          LAST_UPDATED_TABLE_NAME: !Ref LastUpdatedTableName
      MemorySize: 1024
      Runtime: java8
      Timeout: 900
      VpcConfig:
        SecurityGroupIds:
          - !Ref LambdaSecurityGroup
        SubnetIds: !Ref VpcSubnets
      Role:
        !GetAtt PerformFormstackSarLambdaRole.Arn
    DependsOn:
      - PerformFormstackSarLambdaRole

  FormstackBatonRerLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: EC2Policy
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - ec2:CreateNetworkInterface
                  - ec2:DescribeNetworkInterfaces
                  - ec2:DeleteNetworkInterface
                Resource: "*"
        - PolicyName: LogPolicy
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/formstack-baton-rer-lambda-${Stage}:log-stream:*"
        - PolicyName: S3ListPolicy
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - s3:ListBucket
                Resource: !Sub arn:aws:s3:::${ResultsBucket}
        - PolicyName: InvokeLambdaPolicy
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource: !GetAtt PerformFormstackRerLambda.Arn

  FormstackBatonRerLambda:
    Type: AWS::Lambda::Function
    Properties:
      Description: Initiates the PerformFormstackRerLambda and checks the status of Formstack RERs via S3
      FunctionName:
        !Sub formstack-baton-rer-lambda-${Stage}
      Code:
        S3Bucket: identity-lambda
        S3Key: !Sub identity/${Stage}/formstack-baton-requests/main.jar
      Handler: com.gu.identity.formstackbatonrequests.Handler::handleRer
      Environment:
        Variables:
          RESULTS_BUCKET: !Ref ResultsBucket
          RESULTS_PATH: !Sub formstack-results/${Stage}
          PERFORM_FUNCTION_NAME: !Ref PerformFormstackRerLambda
      MemorySize: 384
      Runtime: java8
      Timeout: 120
      VpcConfig:
        SecurityGroupIds:
          - !Ref LambdaSecurityGroup
        SubnetIds: !Ref VpcSubnets
      Role:
        !GetAtt FormstackBatonRerLambdaRole.Arn

  PerformFormstackRerLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: EC2Policy
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - ec2:CreateNetworkInterface
                  - ec2:DescribeNetworkInterfaces
                  - ec2:DeleteNetworkInterface
                Resource: "*"
        - PolicyName: LogPolicy
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/formstack-baton-perform-rer-lambda-${Stage}:log-stream:*"
        - PolicyName: S3ListPolicy
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - s3:ListBucket
                Resource: !Sub arn:aws:s3:::${ResultsBucket}
        - PolicyName: S3WritePolicy
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:PutObjectAcl
                  - s3:GetObject
                Resource: !Sub arn:aws:s3:::${ResultsBucket}/formstack-results/${Stage}/*
        - PolicyName: GetParamsPolicy
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action: ssm:GetParameter
                Resource:
                  - !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter${FormstackAccountOneTokenPath}
                  - !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter${FormstackAccountTwoTokenPath}
                  - !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter${EncryptionPasswordPath}
                  - !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter${BcryptSaltPath}

  PerformFormstackRerLambda:
    Type: AWS::Lambda::Function
    Properties:
      Description: Performs RER to Formstack, writing status updates to S3
      FunctionName:
        !Sub formstack-baton-perform-rer-lambda-${Stage}
      Code:
        S3Bucket: identity-lambda
        S3Key: !Sub identity/${Stage}/formstack-baton-requests/main.jar
      Handler: com.gu.identity.formstackbatonrequests.Handler::handlePerformRer
      Environment:
        Variables:
          STAGE: !Ref Stage
          RESULTS_BUCKET: !Ref ResultsBucket
          RESULTS_PATH: !Sub formstack-results/${Stage}
          ENCRYPTION_PASSWORD_PATH: !Ref EncryptionPasswordPath
          FORMSTACK_ACCOUNT_ONE_TOKEN_PATH: !Ref FormstackAccountOneTokenPath
          FORMSTACK_ACCOUNT_TWO_TOKEN_PATH: !Ref FormstackAccountTwoTokenPath
          BCRYPT_SALT_PATH: !Ref BcryptSaltPath
          SUBMISSION_TABLE_NAME: !Ref SubmissionsTableName
          LAST_UPDATED_TABLE_NAME: !Ref LastUpdatedTableName
      MemorySize: 1024
      Runtime: java8
      Timeout: 900
      VpcConfig:
        SecurityGroupIds:
          - !Ref LambdaSecurityGroup
        SubnetIds: !Ref VpcSubnets
      Role:
        !GetAtt PerformFormstackRerLambdaRole.Arn
    DependsOn:
      - PerformFormstackRerLambdaRole

  FormstackBatonRequestsLambdaErrorAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: Alert when formstack baton request lambdas error
      Namespace: AWS/Lambda
      Dimensions:
        - Name: BatonSarLambdaName
          Value: !Ref FormstackBatonSarLambda
        - Name: PerformSarLambdaName
          Value: !Ref PerformFormstackSarLambda
      MetricName: Errors
      Statistic: Sum
      ComparisonOperator: GreaterThanOrEqualToThreshold
      Threshold: '1'
      Period: '60'
      EvaluationPeriods: '1'
      AlarmActions:
        - !If [IsProd, !Ref 'TopicPagerDutyAlerts', !Ref 'AWS::NoValue']